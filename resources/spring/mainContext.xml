<?xml version="1.0" encoding="UTF-8"?>
<!-- Repository and Service layers -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa" xmlns:jms="http://www.springframework.org/schema/jms"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
	http://www.springframework.org/schema/jms http://www.springframework.org/schema/jms/spring-jms.xsd">
	
	<context:annotation-config /> <!-- This Enables Autowiring -->
	<context:property-placeholder location='classpath:config.properties' />

	<!-- Profile Aware Beans -->

	<!-- Test -->
	<beans profile="test">
		<!-- Wee need to define the DataSource here and then bind it manually -->
		<!--<bean id="dataSource" class="org.apache.tomcat.dbcp.dbcp.BasicDataSource"-->
			<!--destroy-method="close">-->
			<!--<property name="driverClassName" value="org.postgresql.Driver" />-->
			<!--<property name="url"-->
				<!--value="jdbc:postgresql://163.10.20.116:5433/tripSplitterClone" />-->
			<!--<property name="username" value="postgres" />-->
			<!--<property name="password" value="postgres" />-->
			<!--<property name="maxActive" value="20" />-->
			<!--<property name="maxIdle" value="10" />-->
			<!--<property name="maxWait" value="-1" />-->
		<!--</bean>-->
		<!--<bean class="org.tripSplitterClone.core.test.jndi.JndiBinder" init-method="initBinder">-->
			<!--<property name="jndiName" value="java:comp/env/tripSplitterCloneDS"></property>-->
		<!--</bean>-->
	</beans>

	<!-- Profile Unaware Beans -->
	<beans>
		<!-- EntityManagerHelper Config -->
		<bean id="entityManagerHolder" class="org.kairos.tripSplitterClone.dao.EntityManagerHolder" scope="singleton">
			<constructor-arg value="${jpa.persistenceFile.location}"></constructor-arg>
			<constructor-arg value="${jpa.persistenceUnitName}"></constructor-arg>
			<constructor-arg value="${jpa.testPersistenceUnitName}"></constructor-arg>
		</bean>

		<!-- Dozer Mapper Config -->
		<bean id="mapper" class="org.dozer.DozerBeanMapper" scope="singleton">
			<property name="mappingFiles">
				<list>
					<value>${dozer.mappingFile.main}</value>
				</list>
			</property>
		</bean>

		<!-- JSON -->
		<bean id="gson" class="org.kairos.tripSplitterClone.json.GsonSpringFactoryBean"
			scope="singleton" />

		<!-- Default Charset Post Processor -->
		<bean id="httpStringMessageConverterOverridePostProcessor" class="org.kairos.tripSplitterClone.utils.HttpStringMessageConverterOverridePostProcessor"/>
		
		<bean class = "org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"/>

		<!-- Cache / Session -->
		<!--<bean id="sessionUserCacheImpl" class="org.kairos.tripSplitterClone.services.caching.session.UserCacheSessionImpl" scope="request"/>-->
		<bean id="sessionUserCacheImpl" class="org.kairos.tripSplitterClone.services.caching.session.UserCacheSessionImpl" scope="session"/>
	</beans>
</beans>